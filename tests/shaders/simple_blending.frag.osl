
VS_Out :: struct {
	color: f32v3;
	pos:   f32v4;
	index: f32;
}

Data :: struct {
	tints:   [3]f32v4;
	offsets: [3]f32v4;
}

pixel_coord: f32v4 $PixelCoord;

out_color: f32v4 $Output(0);

sample_mode:  SampleMode             $UniformBinding(0);
data:         BlockView(Data)        $UniformBinding(1);
blend_buffer: FBuffer2D(RGBA8_UNORM) $UniformBinding(2);

in: VS_Out $Input(0);

index: u32 = round(in.index) -> u32;
out_color = f32v4.(in.color.x, in.color.y, in.color.z, 1.0)*data.tints[index];

src_color: f32v4 = out_color;
src_alpha_inv: f32 = 1.0-out_color.a;

src_color_multiplied: f32v4 = src_color*src_color.a;

// We want to keep as little computation as possible inside this critical section
invocationPixelInterlockBegin();

dst_color: f32v4 = fbuffer_fetch(blend_buffer, pixel_coord.xy -> s32v2);
out_color = src_color_multiplied + dst_color*(src_alpha_inv);
fbuffer_store(blend_buffer, pixel_coord.xy -> s32v2, out_color);

invocationPixelInterlockEnd();



