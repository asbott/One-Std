// I try to compile with -pedantic and -Weverything, but get really dumb warnings like these,
// so I have to ignore them.
#if defined(__GNUC__) || defined(__GNUG__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wattributes"
#pragma GCC diagnostic ignored "-Wunused-function"
#pragma GCC diagnostic ignored "-Wunused-macros"
#pragma GCC diagnostic ignored "-Wunused-const-variable"
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wattributes"
#pragma clang diagnostic ignored "-Wreserved-identifier"
#pragma clang diagnostic ignored "-Wdeclaration-after-statement"
#pragma clang diagnostic ignored "-Wcovered-switch-default"
#pragma clang diagnostic ignored "-Wcast-align"
#pragma clang diagnostic ignored "-Wunused-function"
#pragma clang diagnostic ignored "-Wunused-macros"
#pragma clang diagnostic ignored "-Wunused-const-variable"
#if __STDC_VERSION__ == 202311
#pragma clang diagnostic ignored "-Wpre-c23-compat"
#endif
#ifdef __EMSCRIPTEN__
#pragma clang diagnostic ignored "-Wpadded"
#endif // __EMSCRIPTEN__
#if defined(_MSC_VER) || defined(__EMSCRIPTEN__)
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"
#endif
#endif // __clang__
#ifndef _ONE_MATH_H
#define _ONE_MATH_H

#ifndef _MATH_H
#define _MATH_H

#ifndef _BASE_H

/* Begin include: base.h */

#ifndef _BASE_H
#define _BASE_H


/*
            Compiler
*/

#define COMPILER_FLAG_CLANG       (1 << 0)
#define COMPILER_FLAG_GNU         (1 << 1)
#define COMPILER_FLAG_MSC         (1 << 2)
#define COMPILER_FLAG_INTEL       (1 << 3)
#define COMPILER_FLAG_TCC         (1 << 4)
#define COMPILER_FLAG_EMSCRIPTEN  (1 << 5)
#define COMPILER_FLAG_PGI         (1 << 6)
#define COMPILER_FLAG_SUNPRO      (1 << 7)
#define COMPILER_FLAG_CLANG_GNU   (1 << 8)

#ifdef __clang__
    #define CLANG 1
#else
    #define CLANG 0
#endif

#if defined(__GNUC__) || defined(__GNUG__)
    #define GNU 1
#else
    #define GNU 0
#endif

#ifdef _MSC_VER
    #define MSC 1
#else
    #define MSC 0
#endif

#ifdef __INTEL_COMPILER
    #define INTEL 1
#else
    #define INTEL 0
#endif

#ifdef __TINYC__
    #define TCC 1
#else
    #define TCC 0
#endif

#ifdef __EMSCRIPTEN__
    #define EMSCRIPTEN 1
#else
    #define EMSCRIPTEN 0
#endif

#ifdef __PGI
    #define PGI 1
#else
    #define PGI 0
#endif

#ifdef __SUNPRO_C
    #define SUNPRO 1
#else
    #define SUNPRO 0
#endif

#define COMPILER_FLAGS ( \
    (CLANG ? COMPILER_FLAG_CLANG : 0) | \
    (GNU ? COMPILER_FLAG_GNU : 0) | \
    (MSC ? COMPILER_FLAG_MSC : 0) | \
    (INTEL ? COMPILER_FLAG_INTEL : 0) | \
    (TCC ? COMPILER_FLAG_TCC : 0) | \
    (EMSCRIPTEN ? COMPILER_FLAG_EMSCRIPTEN : 0) | \
    (PGI ? COMPILER_FLAG_PGI : 0) | \
    (SUNPRO ? COMPILER_FLAG_SUNPRO : 0) | \
    ((CLANG && GNU) ? COMPILER_FLAG_CLANG_GNU : 0) \
)

// Architexture

#if defined(_M_IX86) || defined(__i386__) || defined(__EMSCRIPTEN__)
    #define ARCH_X86 1
#elif defined(_M_X64) || defined(_M_AMD64) || defined(__x86_64__)
    #define ARCH_X64 1
#elif defined(_M_ARM) || defined(__arm__)
    #define ARCH_ARM 1
#elif defined(_M_ARM64) || defined(__aarch64__)
    #define ARCH_ARM64 1
#else
    #error "Unknown architecture"
#endif

#define local_persist static
#define forward_global extern
#define unit_local static

// make inline actually inline if supported by compiler

#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wkeyword-macro"
#endif
#if COMPILER_FLAGS & COMPILER_FLAG_GNU
    #define inline __attribute__((always_inline))
#elif COMPILER_FLAGS & COMPILER_FLAG_MSC
    #define inline __forceinline
#endif
#ifdef __clang__
#pragma clang diagnostic pop
#endif

#define CSTD_C90 1
#ifdef __STDC_VERSION__
    #if __STDC_VERSION__ == 199901
        #define CSTD_C99 1
    #else
        #define CSTD_C99 0
    #endif // CSTD_C99
    #if __STDC_VERSION__ == 201112
        #define CSTD_C11 1
    #else
        #define CSTD_C11 0
    #endif // CSTD_C11
    #if __STDC_VERSION__ == 201710
        #define CSTD_C17 1
    #else
        #define CSTD_C17 0
    #endif // CSTD_C17
    #if __STDC_VERSION__ == 202311
        #define CSTD_C23 1
    #else
        #define CSTD_C23 0
    #endif // CSTD_C23
#endif

#if CSTD_C23
    #define CSTD "C23"
#elif CSTD_C17
    #define CSTD "C17"
#elif CSTD_C11
    #define CSTD "C11"
#elif CSTD_C99
    #define CSTD "C99"
#elif CSTD_C90
    #define CSTD "C90"
#else
    #warning "Unknown C standard."
    #define CSTD "CUnknown"
#endif




/*
            Target system
*/

#define OS_FLAG_WINDOWS           (1 << 0)
#define OS_FLAG_UNIX              (1 << 1)
#define OS_FLAG_LINUX             (1 << 2)
#define OS_FLAG_APPLE             (1 << 3)
#define OS_FLAG_MACOS             (1 << 4)
#define OS_FLAG_IOS               (1 << 5)
#define OS_FLAG_ANDROID           (1 << 6)
#define OS_FLAG_STEAMOS           (1 << 7)
#define OS_FLAG_LINUX_BASED       (1 << 8)
#define OS_FLAG_HAS_WINDOW_SYSTEM (1 << 9)
#define OS_FLAG_EMSCRIPTEN        (1 << 10)

#define OS_FLAG_WEB OS_FLAG_EMSCRIPTEN

#ifdef _WIN32
    #define OS_FLAGS (OS_FLAG_WINDOWS | OS_FLAG_HAS_WINDOW_SYSTEM)
#elif defined(__APPLE__)
    #include <TargetConditionals.h>
    #if TARGET_OS_IPHONE || TARGET_IPHONE_SIMULATOR
        #define OS_FLAGS (OS_FLAG_UNIX | OS_FLAG_APPLE | OS_FLAG_IOS)
    #elif TARGET_OS_MAC
        #define OS_FLAGS (OS_FLAG_UNIX | OS_FLAG_APPLE | OS_FLAG_MACOS | OS_FLAG_HAS_WINDOW_SYSTEM)
    #else
        #define OS_FLAGS (OS_FLAG_UNIX | OS_FLAG_APPLE)
    #endif
#elif defined(__ANDROID__)
    #define OS_FLAGS (OS_FLAG_UNIX | OS_FLAG_LINUX_BASED | OS_FLAG_ANDROID)
#elif defined(__STEAMOS__) /* You need to define this yourself when targetting steam */
    #define OS_FLAGS (OS_FLAG_UNIX | OS_FLAG_LINUX_BASED | OS_FLAG_LINUX | OS_FLAG_STEAMOS)
#elif defined(__linux__)
    #define OS_FLAGS (OS_FLAG_UNIX | OS_FLAG_LINUX_BASED | OS_FLAG_LINUX | OS_FLAG_HAS_WINDOW_SYSTEM)
#elif defined(__EMSCRIPTEN__)
    #define OS_FLAGS (OS_FLAG_UNIX | OS_FLAG_EMSCRIPTEN)
#elif defined(__unix__) || defined(__unix)
    #define OS_FLAGS (OS_FLAG_UNIX)
#else
    #define OS_FLAGS (0)
#endif

#if COMPILER_FLAGS & COMPILER_FLAG_MSC

    #pragma clang diagnostic push
    #pragma clang diagnostic ignored "-Wlanguage-extension-token"
    typedef unsigned __int8   u8;
    typedef signed __int8     s8;
    typedef unsigned __int16  u16;
    typedef signed __int16    s16;
    typedef unsigned __int32  u32;
    typedef signed __int32    s32;
    typedef unsigned __int64  u64;
    typedef signed __int64    s64;
    typedef unsigned __int64 uintptr;
    #pragma clang diagnostic pop

#elif COMPILER_FLAGS & COMPILER_FLAG_GNU

    typedef __UINT64_TYPE__ u64;
    typedef __INT64_TYPE__  s64;
    typedef __UINT32_TYPE__ u32;
    typedef __INT32_TYPE__  s32;
    typedef __UINT16_TYPE__ u16;
    typedef __INT16_TYPE__  s16;
    typedef __UINT8_TYPE__  u8;
    typedef __INT8_TYPE__   s8;

    typedef __UINTPTR_TYPE__  uintptr;

#else

    #include <stdint.h>
    typedef uint8_t  u8;
    typedef int8_t   s8;
    typedef uint16_t u16;
    typedef int16_t  s16;
    typedef uint32_t u32;
    typedef int32_t  s32;
    typedef uint64_t u64;
    typedef int64_t  s64;

     typedef uintptr_t uintptr;

#endif

typedef float float32;
typedef double float64;
#if defined(__SIZEOF_FLOAT128__) && __SIZEOF_FLOAT128__ == 16
    typedef __float128 float128;
    #define HAS_FLOAT128 1
#elif defined(__SIZEOF_LONG_DOUBLE__) && __SIZEOF_LONG_DOUBLE__ == 16
    typedef long double float128;
    #define HAS_FLOAT128 1
#else
    #define HAS_FLOAT128 0
#endif

typedef u8 uint8;
typedef s8 int8;
typedef u16 uint16;
typedef s16 int16;
typedef u32 uint32;
typedef s32 int32;
typedef u64 uint64;
typedef s64 int64;

typedef float32 f32;
typedef float64 f64;
#if HAS_FLOAT128
typedef float128 f128;
#endif // HAS_FLOAT128

#define U8_MIN 0
#define U8_MAX 255U
#define S8_MIN (-128)
#define S8_MAX 127
#define U16_MIN 0
#define U16_MAX 65535U
#define S16_MIN (-32768)
#define S16_MAX 32767
#define U32_MIN 0U
#define U32_MAX 4294967295UL
#define S32_MIN (-2147483648L)
#define S32_MAX 2147483647L
#define U64_MIN 0ULL
#define U64_MAX 18446744073709551615ULL
#define S64_MIN (-9223372036854775807LL - 1)
#define S64_MAX 9223372036854775807LL

#define UINT8_MIN 0
#define UINT8_MAX 255U
#define INT8_MIN (-128)
#define INT8_MAX 127
#define UINT16_MIN 0
#define UINT16_MAX 65535U
#define INT16_MIN (-32768)
#define INT16_MAX 32767
#define UINT32_MIN 0U
#define UINT32_MAX 4294967295UL
#define INT32_MIN (-2147483648L)
#define INT32_MAX 2147483647L
#define UINT64_MIN 0ULL
#define UINT64_MAX 18446744073709551615ULL
#define INT64_MIN (-9223372036854775807LL - 1)
#define INT64_MAX 9223372036854775807LL

#if defined(ARCH_X64) || defined (ARCH_ARM64)
typedef s64 sys_int;
typedef u64 sys_uint;
#define SYS_INT_MAX SYS_S64_MAX
#define SYS_UINT_MAX SYS_U64_MAX
#else
#if OS_FLAGS & OS_FLAG_EMSCRIPTEN
typedef signed long sys_int;
typedef unsigned long sys_uint;
#else
typedef s32 sys_int;
typedef u32 sys_uint;
#endif
#define SYS_INT_MAX S32_MAX
#define SYS_UINT_MAX U32_MAX
#endif

#if !CSTD_C23

#if (COMPILER_FLAGS & COMPILER_FLAG_CLANG) && ((COMPILER_FLAGS & COMPILER_FLAG_MSC) || COMPILER_FLAGS & COMPILER_FLAG_EMSCRIPTEN)
    #pragma clang diagnostic push
    #pragma clang diagnostic ignored "-Wc23-compat"
#endif // (COMPILER_FLAGS & COMPILER_FLAG_CLANG) && ((COMPILER_FLAGS & COMPILER_FLAG_MSC) || COMPILER_FLAGS & COMPILER_FLAG_EMSCRIPTEN)

    typedef s8 bool;
    #define true 1
    #define false 0
#if (COMPILER_FLAGS & COMPILER_FLAG_CLANG) && ((COMPILER_FLAGS & COMPILER_FLAG_MSC) || COMPILER_FLAGS & COMPILER_FLAG_EMSCRIPTEN)
    #pragma clang diagnostic pop
#endif // (COMPILER_FLAGS & COMPILER_FLAG_CLANG) && ((COMPILER_FLAGS & COMPILER_FLAG_MSC) || COMPILER_FLAGS & COMPILER_FLAG_EMSCRIPTEN)

#else // !CSTD_C23

#endif // CSTD_C23

#if COMPILER_FLAGS & COMPILER_FLAG_MSC
#define debug_break(...) __debugbreak()
#elif COMPILER_FLAGS & COMPILER_FLAG_GNU
#define debug_break(...) __builtin_trap()
#else
#define debug_break(...) *(volatile int*)0 = 1
#endif

#define STRINGIFY(x) #x
#define TOSTRING(x) STRINGIFY(x)
#define assertmsg(x, msg) assertmsgs(x, STR(msg))
#define assertmsgs(x, msg)  do { \
        if (!(x)) {\
            sys_write_string(sys_get_stderr(), STR("\n========================================================\n"));\
            sys_write_string(sys_get_stderr(), STR("==========!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!==========\n"));\
            sys_write_string(sys_get_stderr(), STR("========================================================\n"));\
            sys_write_string(sys_get_stderr(), STR("\nAssertion failed for expression: '"));\
            sys_write_string(sys_get_stderr(), STR(#x));\
            sys_write_string(sys_get_stderr(), STR("'.\n"));\
            if (msg.data && msg.count) {\
                sys_write_string(sys_get_stderr(), STR("\n\""));\
                sys_write_string(sys_get_stderr(), msg);\
                sys_write_string(sys_get_stderr(), STR("\"\n"));\
            }\
            sys_write_string(sys_get_stderr(), STR("\nIn File '"));\
            sys_write_string(sys_get_stderr(), STR(__FILE__));\
            sys_write_string(sys_get_stderr(), STR("' on line "));\
            sys_write_string(sys_get_stderr(), STR(TOSTRING(__LINE__)));\
            sys_write_string(sys_get_stderr(), STR("\n\nPrinting stack trace:\n"));\
            sys_print_stack_trace(sys_get_stderr());\
            sys_write_string(sys_get_stderr(), STR("\n\n========================================================\n"));\
            sys_write_string(sys_get_stderr(), STR("==========!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!==========\n"));\
            sys_write_string(sys_get_stderr(), STR("========================================================\n"));\
            debug_break();\
        } \
    } while(0)
#define assert(x) assertmsg(x, "")

#ifndef OSTD_LIB
    #define OSTD_LIB
#endif

inline void *memcpy(void *dst, const void * src, sys_uint n);
// todo(charlie) inline asm / dynamically load crt's if msvc
inline void *memset(void *dst, s32 c, sys_uint n) {
    sys_uint i;
    for (i = 0; i+4 < n; i += 4)  *((s32*)dst + (i/4)) = c;
    if (i < n) memcpy(dst, &c, n-i);
    return dst;
}
inline void *memcpy(void *dst, const void * src, sys_uint n) {
    for (sys_uint i = 0; i < n; i += 1)  *((u8*)dst + i) = *((const u8*)src + i);
    return dst;
}
inline void *memmove(void *dst, const void *src, sys_uint n) {
    if (!n) return dst;
    if ((sys_uint)dst > (sys_uint)src)
        for (s64 i = (s64)n-1; i >= 0; i -= 1)  *((u8*)dst + i) = *((const u8*)src + i);
    else
        for (sys_uint i = 0; i < n; i += 1)  *((u8*)dst + i) = *((const u8*)src + i);
    return dst;
}

inline int memcmp(const void* a, const void* b, sys_uint n) {
    const u8 *p1 = (const u8 *)a;
    const u8 *p2 = (const u8 *)b;

    for (u32 i = 0; i < n; i++) {
        if (p1[i] != p2[i]) {
            return p1[i] - p2[i];
        }
    }
    return 0;
}

#define DEFAULT(T) T##_default()


// Forward decls
u64 format_signed_int(s64 x, int base, void *buffer, u64 buffer_size);
u64 format_unsigned_int(u64 x, int base, void *buffer, u64 buffer_size);
u64 format_float(float64 x, int decimal_places, void *buffer, u64 buffer_size);



#define PP_FIRST_ARG_HELPER(first, ...) first
#define PP_FIRST_ARG(...) PP_FIRST_ARG_HELPER(__VA_ARGS__, 0)

#define PP_EXCLUDE_FIRST_ARG_HELPER(first, ...) __VA_ARGS__
#define PP_EXCLUDE_FIRST_ARG(...) PP_EXCLUDE_FIRST_ARG_HELPER(__VA_ARGS__)

#define Swap(a, b) do {  u8 tmp__[sizeof(a)]; memcpy(tmp__, &a, sizeof(a)); a = b; memcpy(&b, tmp__, sizeof(b)); } while (0)

#ifndef offsetof
#define offsetof(t, d) ((sys_uint)&(((t *)0)->d))
#endif


void __cpuid(int cpuInfo[4], int function_id);

#define min(a, b) ((a) < (b) ? (a) : (b))
#define max(a, b) ((a) > (b) ? (a) : (b))

unit_local inline bool is_alpha(u8 c) {
	return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');
}
unit_local inline bool is_digit(u8 c) {
	return (c >= '0' && c <= '9');
}
unit_local inline bool is_whitespace(u8 c) {
	return c == '\n' || c == '\r' || c == '\t' || c == ' ';
}

unit_local inline u64 align_next(u64 n, u64 align) {
    return (n+align-1) & ~(align-1);
}

#endif // _BASE_H




/* End include: base.h */
#endif // _BASE_H


/* Begin include: trig_tables.h */
#ifndef _TRIG_TABLES_H
#define _TRIG_TABLES_H

#ifndef _BASE_H
#endif // _BASE_H

unit_local const float64 sine_table[360] = {
    0,    0.017452406437283512,    0.034899496702500969,    0.052335956242943828,    0.069756473744125302,    0.087155742747658166,    0.10452846326765346,    0.12186934340514748,
    0.13917310096006544,    0.15643446504023087,    0.17364817766693033,    0.1908089953765448,    0.20791169081775931,    0.22495105434386498,    0.24192189559966773,    0.25881904510252074,
    0.27563735581699916,    0.29237170472273671,    0.3090169943749474,    0.3255681544571567,    0.34202014332566871,    0.35836794954530027,    0.37460659341591201,    0.39073112848927372,
    0.40673664307580015,    0.42261826174069944,    0.4383711467890774,    0.45399049973954675,    0.46947156278589081,    0.48480962024633706,    0.49999999999999994,    0.51503807491005416,
    0.5299192642332049,    0.54463903501502697,    0.55919290347074679,    0.57357643635104605,    0.58778525229247314,    0.60181502315204827,    0.61566147532565829,    0.6293203910498375,
    0.64278760968653925,    0.65605902899050728,    0.66913060635885824,    0.68199836006249848,    0.69465837045899725,    0.70710678118654757,    0.71933980033865108,    0.73135370161917046,
    0.74314482547739413,    0.7547095802227719,    0.76604444311897801,    0.77714596145697079,    0.7880107536067219,    0.79863551004729283,    0.80901699437494745,    0.8191520442889918,
    0.82903757255504174,    0.83867056794542394,    0.84804809615642607,    0.85716730070211222,    0.8660254037844386,    0.87461970713939574,    0.88294759285892688,    0.89100652418836779,
    0.89879404629916704,    0.90630778703664994,    0.91354545764260087,    0.92050485345244037,    0.92718385456678731,    0.93358042649720174,    0.93969262078590832,    0.94551857559931674,
    0.95105651629515353,    0.95630475596303544,    0.96126169593831889,    0.96592582628906831,    0.97029572627599647,    0.97437006478523525,    0.97814760073380569,    0.98162718344766398,
    0.98480775301220802,    0.98768834059513777,    0.99026806874157036,    0.99254615164132198,    0.99452189536827329,    0.99619469809174555,    0.9975640502598242,    0.99862953475457383,
    0.99939082701909576,    0.99984769515639127,    1,    0.99984769515639127,    0.99939082701909576,    0.99862953475457383,    0.9975640502598242,    0.99619469809174555,
    0.9945218953682734,    0.99254615164132209,    0.99026806874157036,    0.98768834059513766,    0.98480775301220802,    0.98162718344766398,    0.97814760073380569,    0.97437006478523525,
    0.97029572627599647,    0.96592582628906831,    0.96126169593831889,    0.95630475596303555,    0.95105651629515364,    0.94551857559931685,    0.93969262078590843,    0.93358042649720174,
    0.92718385456678742,    0.92050485345244037,    0.91354545764260098,    0.90630778703665005,    0.89879404629916693,    0.8910065241883679,    0.8829475928589271,    0.87461970713939585,
    0.86602540378443871,    0.85716730070211233,    0.84804809615642607,    0.83867056794542405,    0.82903757255504174,    0.81915204428899202,    0.80901699437494745,    0.79863551004729272,
    0.78801075360672201,    0.77714596145697101,    0.76604444311897801,    0.75470958022277213,    0.74314482547739447,    0.73135370161917057,    0.71933980033865108,    0.70710678118654757,
    0.69465837045899748,    0.68199836006249848,    0.66913060635885802,    0.65605902899050728,    0.64278760968653947,    0.62932039104983739,    0.6156614753256584,    0.6018150231520486,
    0.58778525229247325,    0.57357643635104594,    0.5591929034707469,    0.54463903501502731,    0.5299192642332049,    0.51503807491005438,    0.49999999999999994,    0.48480962024633717,
    0.46947156278589069,    0.45399049973954686,    0.43837114678907768,    0.4226182617406995,    0.40673664307580004,    0.39073112848927377,    0.37460659341591224,    0.35836794954530066,
    0.34202014332566888,    0.32556815445715659,    0.30901699437494751,    0.29237170472273705,    0.27563735581699922,    0.25881904510252102,    0.24192189559966773,    0.2249510543438652,
    0.20791169081775931,    0.19080899537654497,    0.17364817766693069,    0.15643446504023098,    0.13917310096006533,    0.12186934340514755,    0.10452846326765373,    0.087155742747658194,
    0.069756473744125524,    0.052335956242944251,    0.034899496702501143,    0.017452406437283439,    1.2246467991473532e-16,    -0.017452406437283192,    -0.0348994967025009,    -0.052335956242943564,
    -0.069756473744124831,    -0.087155742747657944,    -0.1045284632676535,    -0.12186934340514774,    -0.13917310096006552,    -0.15643446504023073,    -0.17364817766693047,    -0.19080899537654472,
    -0.20791169081775907,    -0.22495105434386498,    -0.24192189559966751,    -0.25881904510252035,    -0.27563735581699861,    -0.29237170472273677,    -0.30901699437494773,    -0.32556815445715676,
    -0.34202014332566866,    -0.35836794954530043,    -0.37460659341591201,    -0.39073112848927355,    -0.40673664307579982,    -0.42261826174069927,    -0.43837114678907707,    -0.45399049973954625,
    -0.46947156278589047,    -0.48480962024633734,    -0.50000000000000011,    -0.51503807491005416,    -0.52991926423320479,    -0.54463903501502708,    -0.55919290347074668,    -0.57357643635104583,
    -0.58778525229247303,    -0.60181502315204805,    -0.61566147532565785,    -0.62932039104983728,    -0.64278760968653925,    -0.65605902899050739,    -0.66913060635885824,    -0.68199836006249837,
    -0.69465837045899725,    -0.70710678118654746,    -0.71933980033865086,    -0.73135370161917046,    -0.74314482547739402,    -0.75470958022277168,    -0.7660444431189779,    -0.77714596145697112,
    -0.78801075360672213,    -0.79863551004729283,    -0.80901699437494734,    -0.81915204428899158,    -0.8290375725550414,    -0.83867056794542416,    -0.84804809615642596,    -0.85716730070211211,
    -0.86602540378443849,    -0.87461970713939552,    -0.88294759285892699,    -0.89100652418836779,    -0.89879404629916682,    -0.90630778703665016,    -0.91354545764260098,    -0.92050485345244026,
    -0.92718385456678731,    -0.93358042649720163,    -0.93969262078590821,    -0.94551857559931685,    -0.95105651629515353,    -0.95630475596303532,    -0.96126169593831901,    -0.96592582628906831,
    -0.97029572627599647,    -0.97437006478523513,    -0.97814760073380558,    -0.98162718344766398,    -0.98480775301220802,    -0.98768834059513766,    -0.99026806874157025,    -0.99254615164132198,
    -0.99452189536827329,    -0.99619469809174555,    -0.9975640502598242,    -0.99862953475457394,    -0.99939082701909576,    -0.99984769515639127,    -1,    -0.99984769515639127,
    -0.99939082701909576,    -0.99862953475457394,    -0.99756405025982431,    -0.99619469809174555,    -0.99452189536827329,    -0.99254615164132198,    -0.99026806874157036,    -0.98768834059513777,
    -0.98480775301220813,    -0.98162718344766409,    -0.97814760073380558,    -0.97437006478523525,    -0.97029572627599658,    -0.96592582628906842,    -0.96126169593831901,    -0.95630475596303544,
    -0.95105651629515364,    -0.94551857559931696,    -0.93969262078590832,    -0.93358042649720174,    -0.92718385456678742,    -0.92050485345244049,    -0.91354545764260109,    -0.90630778703665027,
    -0.89879404629916704,    -0.89100652418836801,    -0.8829475928589271,    -0.87461970713939563,    -0.8660254037844386,    -0.85716730070211233,    -0.84804809615642607,    -0.83867056794542427,
    -0.82903757255504162,    -0.8191520442889918,    -0.80901699437494756,    -0.79863551004729305,    -0.78801075360672235,    -0.77714596145697135,    -0.76604444311897812,    -0.75470958022277224,
    -0.74314482547739402,    -0.73135370161917035,    -0.71933980033865108,    -0.70710678118654768,    -0.69465837045899759,    -0.68199836006249892,    -0.66913060635885879,    -0.65605902899050739,
    -0.64278760968653958,    -0.62932039104983717,    -0.61566147532565818,    -0.60181502315204827,    -0.58778525229247336,    -0.57357643635104649,    -0.55919290347074735,    -0.54463903501502697,
    -0.52991926423320501,    -0.51503807491005449,    -0.50000000000000044,    -0.48480962024633767,    -0.46947156278589081,    -0.45399049973954697,    -0.43837114678907779,    -0.42261826174069922,
    -0.40673664307580015,    -0.39073112848927388,    -0.37460659341591235,    -0.35836794954530077,    -0.34202014332566943,    -0.3255681544571567,    -0.30901699437494767,    -0.29237170472273716,
    -0.27563735581699894,    -0.25881904510252068,    -0.24192189559966787,    -0.22495105434386534,    -0.20791169081775987,    -0.19080899537654467,    -0.17364817766693039,    -0.15643446504023109,
    -0.13917310096006588,    -0.12186934340514811,    -0.1045284632676543,    -0.087155742747658319,    -0.069756473744125636,    -0.052335956242943481,    -0.034899496702500823,    -0.01745240643728356
};

unit_local const float64 cosine_table[360] = {
    1,    0.99984769515639127,    0.99939082701909576,    0.99862953475457383,    0.9975640502598242,    0.99619469809174555,    0.99452189536827329,    0.99254615164132198,
    0.99026806874157036,    0.98768834059513777,    0.98480775301220802,    0.98162718344766398,    0.97814760073380569,    0.97437006478523525,    0.97029572627599647,    0.96592582628906831,
    0.96126169593831889,    0.95630475596303555,    0.95105651629515353,    0.94551857559931685,    0.93969262078590843,    0.93358042649720174,    0.92718385456678742,    0.92050485345244037,
    0.91354545764260087,    0.90630778703664994,    0.89879404629916704,    0.8910065241883679,    0.88294759285892699,    0.87461970713939574,    0.86602540378443871,    0.85716730070211233,
    0.84804809615642596,    0.83867056794542405,    0.82903757255504174,    0.8191520442889918,    0.80901699437494745,    0.79863551004729283,    0.7880107536067219,    0.77714596145697079,
    0.76604444311897801,    0.75470958022277201,    0.74314482547739424,    0.73135370161917046,    0.71933980033865119,    0.70710678118654757,    0.69465837045899737,    0.68199836006249848,
    0.66913060635885824,    0.65605902899050739,    0.64278760968653936,    0.6293203910498375,    0.61566147532565829,    0.60181502315204838,    0.58778525229247314,    0.57357643635104605,
    0.55919290347074679,    0.5446390350150272,    0.5299192642332049,    0.51503807491005427,    0.50000000000000011,    0.48480962024633711,    0.46947156278589086,    0.4539904997395468,
    0.43837114678907746,    0.42261826174069944,    0.40673664307580037,    0.39073112848927372,    0.37460659341591218,    0.35836794954530016,    0.34202014332566882,    0.32556815445715676,
    0.30901699437494745,    0.29237170472273677,    0.27563735581699916,    0.25881904510252074,    0.24192189559966767,    0.22495105434386514,    0.20791169081775923,    0.19080899537654492,
    0.17364817766693041,    0.15643446504023092,    0.13917310096006547,    0.12186934340514749,    0.10452846326765346,    0.08715574274765836,    0.069756473744125233,    0.052335956242943966,
    0.03489949670250108,    0.017452406437283598,    6.123233995736766e-17,    -0.017452406437283477,    -0.034899496702500733,    -0.052335956242943842,    -0.06975647374412533,    -0.087155742747658235,
    -0.10452846326765333,    -0.12186934340514737,    -0.13917310096006513,    -0.15643446504023104,    -0.1736481776669303,    -0.1908089953765448,    -0.20791169081775912,    -0.22495105434386481,
    -0.24192189559966756,    -0.25881904510252085,    -0.27563735581699905,    -0.29237170472273666,    -0.30901699437494734,    -0.32556815445715642,    -0.34202014332566871,    -0.35836794954530027,
    -0.37460659341591207,    -0.3907311284892736,    -0.4067366430758001,    -0.42261826174069933,    -0.43837114678907751,    -0.45399049973954675,    -0.46947156278589053,    -0.484809620246337,
    -0.49999999999999978,    -0.51503807491005427,    -0.52991926423320479,    -0.54463903501502708,    -0.55919290347074668,    -0.57357643635104583,    -0.58778525229247303,    -0.60181502315204838,
    -0.61566147532565829,    -0.62932039104983728,    -0.64278760968653936,    -0.65605902899050716,    -0.6691306063588579,    -0.68199836006249837,    -0.69465837045899737,    -0.70710678118654746,
    -0.71933980033865097,    -0.73135370161917046,    -0.74314482547739436,    -0.75470958022277201,    -0.7660444431189779,    -0.7771459614569709,    -0.7880107536067219,    -0.79863551004729261,
    -0.80901699437494734,    -0.81915204428899191,    -0.82903757255504162,    -0.83867056794542394,    -0.84804809615642596,    -0.85716730070211222,    -0.86602540378443871,    -0.87461970713939574,
    -0.88294759285892699,    -0.89100652418836779,    -0.89879404629916682,    -0.90630778703664994,    -0.91354545764260098,    -0.92050485345244037,    -0.92718385456678731,    -0.93358042649720163,
    -0.93969262078590832,    -0.94551857559931685,    -0.95105651629515353,    -0.95630475596303544,    -0.96126169593831889,    -0.9659258262890682,    -0.97029572627599647,    -0.97437006478523513,
    -0.97814760073380569,    -0.98162718344766398,    -0.98480775301220802,    -0.98768834059513766,    -0.99026806874157036,    -0.99254615164132198,    -0.99452189536827329,    -0.99619469809174555,
    -0.9975640502598242,    -0.99862953475457383,    -0.99939082701909576,    -0.99984769515639127,    -1,    -0.99984769515639127,    -0.99939082701909576,    -0.99862953475457383,
    -0.99756405025982431,    -0.99619469809174555,    -0.99452189536827329,    -0.99254615164132198,    -0.99026806874157025,    -0.98768834059513777,    -0.98480775301220802,    -0.98162718344766398,
    -0.97814760073380569,    -0.97437006478523525,    -0.97029572627599647,    -0.96592582628906842,    -0.96126169593831901,    -0.95630475596303544,    -0.95105651629515353,    -0.94551857559931674,
    -0.93969262078590843,    -0.93358042649720174,    -0.92718385456678742,    -0.92050485345244037,    -0.91354545764260109,    -0.90630778703665005,    -0.89879404629916715,    -0.89100652418836812,
    -0.8829475928589271,    -0.87461970713939563,    -0.8660254037844386,    -0.85716730070211233,    -0.84804809615642607,    -0.83867056794542405,    -0.82903757255504174,    -0.81915204428899202,
    -0.80901699437494745,    -0.79863551004729305,    -0.78801075360672224,    -0.77714596145697112,    -0.76604444311897801,    -0.7547095802227719,    -0.74314482547739424,    -0.73135370161917057,
    -0.71933980033865108,    -0.70710678118654768,    -0.69465837045899748,    -0.68199836006249859,    -0.66913060635885846,    -0.65605902899050772,    -0.64278760968653947,    -0.62932039104983706,
    -0.61566147532565807,    -0.60181502315204827,    -0.58778525229247325,    -0.57357643635104638,    -0.55919290347074724,    -0.54463903501502697,    -0.52991926423320501,    -0.51503807491005438,
    -0.50000000000000044,    -0.48480962024633761,    -0.46947156278589075,    -0.45399049973954692,    -0.43837114678907774,    -0.42261826174069916,    -0.4067366430758001,    -0.39073112848927383,
    -0.37460659341591229,    -0.35836794954530071,    -0.34202014332566938,    -0.32556815445715664,    -0.30901699437494756,    -0.2923717047227371,    -0.27563735581699889,    -0.25881904510252063,
    -0.24192189559966779,    -0.22495105434386525,    -0.20791169081775979,    -0.19080899537654461,    -0.17364817766693033,    -0.15643446504023104,    -0.13917310096006583,    -0.12186934340514805,
    -0.10452846326765423,    -0.087155742747658249,    -0.06975647374412558,    -0.052335956242943425,    -0.034899496702500761,    -0.017452406437283498,    -1.8369701987210297e-16,    0.01745240643728313,
    0.034899496702500393,    0.052335956242943057,    0.069756473744125219,    0.087155742747657888,    0.10452846326765387,    0.12186934340514768,    0.13917310096006547,    0.15643446504023067,
    0.17364817766692997,    0.19080899537654425,    0.20791169081775943,    0.22495105434386492,    0.24192189559966742,    0.2588190451025203,    0.2756373558169985,    0.29237170472273671,
    0.30901699437494723,    0.32556815445715631,    0.34202014332566899,    0.35836794954530038,    0.37460659341591196,    0.39073112848927349,    0.40673664307579976,    0.42261826174069883,
    0.4383711467890774,    0.45399049973954664,    0.46947156278589042,    0.48480962024633728,    0.50000000000000011,    0.51503807491005416,    0.52991926423320468,    0.54463903501502664,
    0.55919290347074702,    0.57357643635104605,    0.58778525229247292,    0.60181502315204793,    0.61566147532565785,    0.62932039104983684,    0.64278760968653925,    0.65605902899050705,
    0.66913060635885846,    0.68199836006249859,    0.69465837045899725,    0.70710678118654735,    0.71933980033865086,    0.73135370161917013,    0.74314482547739369,    0.7547095802227719,
    0.76604444311897779,    0.77714596145697112,    0.78801075360672201,    0.79863551004729283,    0.80901699437494734,    0.81915204428899158,    0.8290375725550414,    0.83867056794542405,
    0.84804809615642585,    0.85716730070211211,    0.86602540378443837,    0.87461970713939541,    0.88294759285892699,    0.89100652418836779,    0.89879404629916682,    0.90630778703665005,
    0.91354545764260098,    0.92050485345244026,    0.92718385456678731,    0.93358042649720152,    0.93969262078590809,    0.94551857559931685,    0.95105651629515353,    0.95630475596303532,
    0.96126169593831889,    0.96592582628906831,    0.97029572627599647,    0.97437006478523513,    0.97814760073380558,    0.98162718344766398,    0.98480775301220802,    0.98768834059513766,
    0.99026806874157025,    0.99254615164132198,    0.99452189536827329,    0.99619469809174555,    0.9975640502598242,    0.99862953475457394,    0.99939082701909576,    0.99984769515639127
};

unit_local const float64 tan_table[360] = {
    0,    0.0087268677907587893,    0.017455064928217585,    0.026185921569186928,    0.03492076949174773,    0.043660942908512058,    0.052407779283041196,    0.061162620150484306,
    0.069926811943510414,    0.078701706824618439,    0.087488663525924007,    0.096289048197538613,    0.10510423526567646,    0.11393560830164548,    0.1227845609029046,    0.13165249758739583,
    0.14054083470239145,    0.14945100134912778,    0.15838444032453627,    0.16734260908141957,    0.17632698070846498,    0.18533904493153439,    0.19438030913771848,    0.20345229942369933,
    0.2125565616700221,    0.22169466264293988,    0.23086819112556309,    0.24007875908011603,    0.24932800284318068,    0.25861758435589027,    0.2679491924311227,    0.27732454405983847,
    0.28674538575880792,    0.29621349496208021,    0.30573068145866034,    0.31529878887898349,    0.32491969623290629,    0.33459531950207316,    0.34432761328966527,    0.35411857253069806,
    0.36397023426620234,    0.37388467948480469,    0.38386403503541577,    0.39391047561494241,    0.40402622583515679,    0.41421356237309503,    0.4244748162096047,    0.43481237496093361,
    0.4452286853085361,    0.45572625553258461,    0.46630765815499858,    0.47697553269816012,    0.48773258856586138,    0.49858160805343144,    0.50952544949442879,    0.52056705055174624,
    0.53170943166147877,    0.54295569963843682,    0.55430905145276899,    0.56577277818776994,    0.57735026918962573,    0.58904501642055096,    0.60086061902756038,    0.612800788139932,
    0.62486935190932746,    0.63707026080749318,    0.6494075931975104,    0.66188556119569153,    0.67450851684242652,    0.68728095860161331,    0.70020753820970971,    0.71329306789700531,
    0.72654252800536079,    0.73996107502848762,    0.75355405010279419,    0.76732698797896037,    0.7812856265067174,    0.79543591666782831,    0.80978403319500725,    0.82433638581749569,
    0.83909963117727993,    0.8540806854634666,    0.86928673781622656,    0.8847252645559438,    0.90040404429783993,    0.91633117401742326,    0.93251508613766176,    0.94896456671487961,
    0.96568877480707394,    0.98269726311568995,    0,    1.0176073929721252,    1.0355303137905694,    1.0537801252809622,    1.0723687100246826,    1.0913085010692716,
    1.1106125148291928,    1.1302943863617529,    1.1503684072210092,    1.1708495661125393,    1.19175359259421,    1.2130970040929328,    1.2348971565350511,    1.2571722989189544,
    1.2799416321930785,    1.3032253728412058,    1.3270448216204098,    1.3514224379458082,    1.3763819204711734,    1.4019482944763355,    1.4281480067421144,    1.4550090286724449,
    1.4825609685127403,    1.5108351936149007,    1.5398649638145827,    1.5696855771174902,    1.6003345290410507,    1.6318516871287894,    1.6642794823505174,    1.6976631193260889,
    1.7320508075688767,    1.7674940162428909,    1.8040477552714236,    1.8417708860334581,    1.8807264653463318,    1.9209821269711651,    1.9626105055051504,    2.0056897082590202,
    2.050303841579296,    2.0965435990881738,    2.1445069205095586,    2.1942997311650374,    2.2460367739042151,    2.2998425472362567,    2.3558523658237531,    2.4142135623730949,
    2.4750868534162946,    2.5386478956643073,    2.6050890646938023,    2.674621493926824,    2.7474774194546216,    2.8239128856008011,    2.9042108776758222,    2.9886849627428917,
    3.0776835371752527,    3.1715948023632135,    3.2708526184841404,    3.3759434225912446,    3.4874144438409087,    3.6058835087608729,    3.7320508075688776,    3.8667130948987372,
    4.0107809335358455,    4.1652997700904164,    4.3314758742841528,    4.5107085036620562,    4.7046301094784564,    4.9151570310712049,    5.1445540159703071,    5.3955171743191315,
    5.6712818196177066,    5.9757643644330667,    6.3137515146750411,    6.6911562383174026,    7.115369722384207,    7.5957541127251424,    8.1443464279745932,    8.776887356869949,
    9.5143644542225871,    10.38539708013815,    11.43005230276132,    12.706204736174696,    14.300666256711942,    16.349855476099663,    19.081136687728161,    22.903765548431192,
    28.636253282915515,    38.188459297025304,    57.289961630759144,    114.58865012931011,    0,    -114.58865012931172,    -57.289961630759549,    -38.188459297025808,
    -28.636253282915796,    -22.903765548431256,    -19.081136687728208,    -16.349855476099638,    -14.300666256711921,    -12.706204736174715,    -11.430052302761336,    -10.385397080138164,
    -9.5143644542225978,    -8.7768873568699579,    -8.1443464279746021,    -7.5957541127251629,    -7.1153697223842247,    -6.6911562383174079,    -6.3137515146750367,    -5.9757643644330631,
    -5.6712818196177111,    -5.395517174319135,    -5.1445540159703107,    -4.9151570310712076,    -4.7046301094784591,    -4.5107085036620589,    -4.331475874284159,    -4.1652997700904226,
    -4.0107809335358473,    -3.8667130948987354,    -3.7320508075688763,    -3.6058835087608747,    -3.48741444384091,    -3.3759434225912459,    -3.2708526184841422,    -3.1715948023632148,
    -3.077683537175254,    -2.9886849627428949,    -2.9042108776758253,    -2.823912885600802,    -2.7474774194546225,    -2.6746214939268231,    -2.6050890646938014,    -2.5386478956643082,
    -2.4750868534162955,    -2.4142135623730954,    -2.355852365823754,    -2.2998425472362571,    -2.2460367739042169,    -2.1942997311650396,    -2.1445069205095595,    -2.0965435990881733,
    -2.0503038415792956,    -2.0056897082590197,    -1.962610505505151,    -1.9209821269711667,    -1.8807264653463334,    -1.8417708860334578,    -1.804047755271424,    -1.7674940162428914,
    -1.7320508075688783,    -1.6976631193260903,    -1.6642794823505178,    -1.63185168712879,    -1.6003345290410511,    -1.5696855771174898,    -1.5398649638145827,    -1.5108351936149012,
    -1.4825609685127408,    -1.4550090286724455,    -1.4281480067421155,    -1.401948294476336,    -1.3763819204711738,    -1.3514224379458089,    -1.3270448216204096,    -1.3032253728412055,
    -1.279941632193079,    -1.2571722989189551,    -1.2348971565350519,    -1.2130970040929325,    -1.19175359259421,    -1.1708495661125395,    -1.1503684072210101,    -1.1302943863617536,
    -1.1106125148291937,    -1.0913085010692716,    -1.0723687100246828,    -1.0537801252809618,    -1.0355303137905694,    -1.0176073929721252,    0,    -0.9826972631156905,
    -0.9656887748070746,    -0.9489645667148805,    -0.93251508613766176,    -0.91633117401742359,    -0.9004040442978396,    -0.88472526455594358,    -0.86928673781622667,    -0.85408068546346683,
    -0.83909963117728037,    -0.82433638581749624,    -0.80978403319500702,    -0.79543591666782854,    -0.78128562650671762,    -0.76732698797896071,    -0.75355405010279464,    -0.73996107502848762,
    -0.72654252800536101,    -0.71329306789700564,    -0.70020753820970949,    -0.68728095860161309,    -0.67450851684242674,    -0.66188556119569175,    -0.64940759319751096,    -0.63707026080749363,
    -0.62486935190932746,    -0.61280078813993211,    -0.60086061902756072,    -0.58904501642055085,    -0.57735026918962573,    -0.56577277818777016,    -0.5543090514527691,    -0.54295569963843726,
    -0.53170943166147866,    -0.52056705055174624,    -0.50952544949442891,    -0.49858160805343177,    -0.48773258856586177,    -0.47697553269816068,    -0.46630765815499864,    -0.45572625553258489,
    -0.44522868530853593,    -0.4348123749609335,    -0.42447481620960476,    -0.41421356237309515,    -0.40402622583515707,    -0.39391047561494275,    -0.38386403503541627,    -0.37388467948480475,
    -0.36397023426620256,    -0.35411857253069784,    -0.34432761328966516,    -0.33459531950207316,    -0.32491969623290645,    -0.31529878887898377,    -0.30573068145866067,    -0.29621349496208021,
    -0.28674538575880798,    -0.27732454405983864,    -0.26794919243112297,    -0.25861758435589066,    -0.24932800284318071,    -0.24007875908011617,    -0.23086819112556334,    -0.22169466264293977,
    -0.2125565616700221,    -0.20345229942369944,    -0.19438030913771864,    -0.18533904493153464,    -0.17632698070846534,    -0.16734260908141957,    -0.15838444032453641,    -0.149451001349128,
    -0.14054083470239132,    -0.13165249758739583,    -0.12278456090290465,    -0.11393560830164566,    -0.10510423526567673,    -0.096289048197538543,    -0.087488663525924021,    -0.078701706824618564,
    -0.069926811943510636,    -0.061162620150484626,    -0.052407779283041619,    -0.043660942908512135,    -0.034920769491747904,    -0.026185921569186754,    -0.017455064928217509,    -0.0087268677907588136
};

unit_local const float64 asine_table[360] = {
    -1.5707963267948966,    -1.4653382097729968,    -1.4215867531897484,    -1.3879676100508016,    -1.3595854464357182,    -1.3345450208101262,    -1.3118747847886754,    -1.2909978508678623,
    -1.2715385080758619,    -1.2532358975033751,    -1.235900168355518,    -1.2193880569996676,    -1.2035883062370596,    -1.1884124735890216,    -1.1737888775957623,    -1.1596584644725487,
    -1.145971899316008,    -1.1326874657034041,    -1.1197695149986342,    -1.1071872991574336,    -1.0949140771344799,    -1.082926420377921,    -1.0712036657527422,    -1.059727479364178,
    -1.0484815049888481,    -1.0374510778842423,    -1.0266229897075312,    -1.0159852938148251,    -1.0055271427758981,    -0.99523865182134963,    -0.98511078333774571,    -0.97513524857750977,
    -0.96530442354888779,    -0.95561127666385581,    -0.94604930619603278,    -0.93661248597085578,    -0.9272952180016123,    -0.91809229101589507,    -0.90899884400146158,    -0.90001033404868758,
    -0.8911225078866527,    -0.88233137660740224,    -0.87363319315266419,    -0.86502443220288783,    -0.85650177216264967,    -0.848062078981481,    -0.83970239158669147,    -0.83141990873620653,
    -0.8232119771258759,    -0.81507608060804027,    -0.80700983039706498,    -0.79901095615364959,    -0.79107729785345382,    -0.78320679835735574,    -0.77539749661075297,    -0.76764752140803094,
    -0.75995508566584546,    -0.75231848115538602,    -0.74473607364945116,    -0.73720629844510133,    -0.72972765622696645,    -0.7222987092400539,    -0.71491807774421812,    -0.70758443672535565,
    -0.70029651284096583,    -0.69305308157997247,    -0.6858529646187107,    -0.6786950273567649,    -0.67157817661791541,    -0.66450135850286174,    -0.65746355638164378,    -0.65046378901479707,
    -0.64350110879328437,    -0.63657460008814204,    -0.62968337770157945,    -0.62282658541200286,    -0.616003394606079,    -0.60921300299154324,    -0.6024546333849905,    -0.5957275325693614,
    -0.58903097021627393,    -0.58236423786874347,    -0.57572664798018991,    -0.5691175330059558,    -0.56253624454385565,    -0.55598215252054228,    -0.54945464442072622,    -0.54295312455650291,
    -0.53647701337424902,    -0.53002574679673886,    -0.52359877559829893,    -0.51719556481097761,    -0.51081559315985392,    -0.50445835252573556,    -0.49812334743362624,    -0.4918100945654445,
    -0.48551812229559116,    -0.47924697024804724,    -0.4729961888737777,    -0.46676533904729633,    -0.46055399168132238,    -0.45436172735852637,    -0.4481881359794313,    -0.44203281642559072,
    -0.43589537623722258,    -0.42977543130452767,    -0.42367260557197151,    -0.4175865307548477,    -0.41151684606748806,    -0.40546319796251812,    -0.39942523988059464,    -0.3934026320100944,
    -0.38739504105625305,    -0.38140214001928524,    -0.37542360798103941,    -0.36945912989976992,    -0.36350839641262944,    -0.35757110364551026,    -0.35164695302987792,    -0.34573565112626714,
    -0.33983690945412198,    -0.33395044432768162,    -0.32807597669763,    -0.32221323199823859,    -0.31636193999975132,    -0.31052183466576783,    -0.30469265401539758,    -0.29887413998996698,
    -0.29306603832407424,    -0.28726809842079365,    -0.28148007323084495,    -0.27570171913554942,    -0.26993279583340352,    -0.26417306623010933,    -0.25842229633190961,    -0.25268025514207865,
    -0.24694671456043293,    -0.24122144928572564,    -0.23550423672079973,    -0.22979485688037765,    -0.22409309230137084,    -0.21839872795559964,    -0.21271155116481621,    -0.20703135151792887,
    -0.20135792079033074,    -0.19569105286523944,    -0.19003054365695687,    -0.18437619103596498,    -0.17872779475577347,    -0.1730851563814404,    -0.16744807921968929,    -0.1618163682505496,
    -0.15618983006044823,    -0.15056827277668605,    -0.14495150600323164,    -0.13933934075776949,    -0.13373158940994151,    -0.12812806562072102,    -0.12252858428286376,    -0.11693296146237846,
    -0.11134101434096394,    -0.10575256115935965,    -0.10016742116155977,    -0.094585414539839457,    -0.089006362380547238,    -0.083430086610615045,    -0.077856409944740343,    -0.07228515583319646,
    -0.066716148410225246,    -0.061149212442971841,    -0.055584173280917498,    -0.050020856805770057,    -0.044459089381771261,    -0.038898697806381652,    -0.03333950926130208,    -0.027781351263795242,
    -0.022224051618267186,    -0.016667438368071559,    -0.011111339747498734,    -0.0055555841339131364,    0,    0.0055555841339131364,    0.011111339747498734,    0.016667438368071448,
    0.022224051618267071,    0.027781351263795131,    0.033339509261302192,    0.038898697806381763,    0.044459089381771372,    0.050020856805770057,    0.055584173280917498,    0.061149212442971841,
    0.066716148410225246,    0.07228515583319646,    0.077856409944740343,    0.083430086610614934,    0.089006362380547127,    0.094585414539839568,    0.10016742116155988,    0.10575256115935976,
    0.11134101434096394,    0.11693296146237846,    0.12252858428286376,    0.12812806562072102,    0.13373158940994151,    0.13933934075776949,    0.14495150600323153,    0.15056827277668594,
    0.15618983006044812,    0.16181636825054971,    0.16744807921968941,    0.1730851563814404,    0.17872779475577347,    0.18437619103596498,    0.19003054365695687,    0.19569105286523944,
    0.20135792079033074,    0.20703135151792876,    0.2127115511648161,    0.21839872795559953,    0.22409309230137095,    0.22979485688037776,    0.23550423672079984,    0.24122144928572564,
    0.24694671456043293,    0.25268025514207865,    0.25842229633190961,    0.26417306623010933,    0.2699327958334034,    0.27570171913554931,    0.28148007323084484,    0.28726809842079376,
    0.29306603832407435,    0.29887413998996709,    0.30469265401539758,    0.31052183466576783,    0.31636193999975132,    0.32221323199823859,    0.32807597669763,    0.33395044432768162,
    0.33983690945412187,    0.34573565112626703,    0.35164695302987803,    0.35757110364551037,    0.36350839641262955,    0.36945912989976992,    0.37542360798103941,    0.38140214001928524,
    0.38739504105625305,    0.3934026320100944,    0.39942523988059464,    0.40546319796251801,    0.41151684606748795,    0.41758653075484758,    0.42367260557197162,    0.42977543130452778,
    0.43589537623722258,    0.44203281642559072,    0.4481881359794313,    0.45436172735852637,    0.46055399168132238,    0.46676533904729633,    0.47299618887377759,    0.47924697024804713,
    0.48551812229559105,    0.49181009456544461,    0.49812334743362635,    0.50445835252573579,    0.51081559315985392,    0.51719556481097761,    0.52359877559829893,    0.53002574679673886,
    0.53647701337424902,    0.54295312455650291,    0.54945464442072622,    0.55598215252054217,    0.56253624454385576,    0.56911753300595591,    0.57572664798018991,    0.58236423786874347,
    0.58903097021627393,    0.5957275325693614,    0.6024546333849905,    0.60921300299154324,    0.616003394606079,    0.62282658541200286,    0.62968337770157934,    0.63657460008814215,
    0.64350110879328448,    0.65046378901479707,    0.65746355638164378,    0.66450135850286174,    0.67157817661791541,    0.6786950273567649,    0.6858529646187107,    0.69305308157997247,
    0.70029651284096583,    0.70758443672535543,    0.71491807774421789,    0.72229870924005413,    0.72972765622696645,    0.73720629844510133,    0.74473607364945116,    0.75231848115538602,
    0.75995508566584546,    0.76764752140803094,    0.77539749661075297,    0.78320679835735574,    0.7910772978534536,    0.79901095615364937,    0.8070098303970652,    0.81507608060804027,
    0.8232119771258759,    0.83141990873620653,    0.83970239158669147,    0.848062078981481,    0.85650177216264967,    0.86502443220288783,    0.87363319315266419,    0.88233137660740202,
    0.89112250788665259,    0.9000103340486878,    0.9089988440014618,    0.91809229101589507,    0.9272952180016123,    0.93661248597085578,    0.94604930619603278,    0.95561127666385581,
    0.96530442354888779,    0.97513524857750977,    0.98511078333774549,    0.99523865182134941,    1.0055271427758983,    1.0159852938148253,    1.0266229897075312,    1.0374510778842423,
    1.0484815049888481,    1.059727479364178,    1.0712036657527422,    1.082926420377921,    1.0949140771344799,    1.1071872991574334,    1.119769514998634,    1.1326874657034038,
    1.1459718993160082,    1.1596584644725492,    1.1737888775957623,    1.1884124735890216,    1.2035883062370596,    1.2193880569996676,    1.235900168355518,    1.2532358975033751,
    1.2715385080758614,    1.2909978508678619,    1.3118747847886749,    1.3345450208101266,    1.3595854464357187,    1.387967610050802,    1.4215867531897484,    1.4653382097729968
};

unit_local const float64 acosine_table[360] = {
    3.1415926535897931,    3.0361345365678933,    2.9923830799846449,    2.9587639368456982,    2.9303817732306148,    2.9053413476050229,    2.8826711115835719,    2.8617941776627589,
    2.8423348348707584,    2.8240322242982718,    2.8066964951504145,    2.7901843837945641,    2.7743846330319561,    2.7592088003839184,    2.7445852043906589,    2.7304547912674453,
    2.7167682261109043,    2.7034837924983006,    2.6905658417935308,    2.6779836259523302,    2.6657104039293764,    2.6537227471728175,    2.641999992547639,    2.6305238061590748,
    2.6192778317837444,    2.6082474046791386,    2.5974193165024277,    2.5867816206097216,    2.5763234695707946,    2.5660349786162464,    2.555907110132642,    2.5459315753724066,
    2.5361007503437847,    2.5264076034587526,    2.5168456329909294,    2.5074088127657523,    2.4980915447965089,    2.4888886178107916,    2.4797951707963581,    2.4708066608435844,
    2.4619188346815495,    2.4531277034022989,    2.444429519947561,    2.4358207589977843,    2.4272980989575466,    2.4188584057763776,    2.410498718381588,    2.4022162355311032,
    2.3940083039207725,    2.3858724074029367,    2.3778061571919618,    2.3698072829485461,    2.3618736246483505,    2.3540031251522522,    2.3461938234056499,    2.3384438482029273,
    2.3307514124607422,    2.3231148079502826,    2.3155324004443476,    2.3080026252399981,    2.3005239830218631,    2.2930950360349507,    2.2857144045391147,    2.2783807635202522,
    2.2710928396358625,    2.263849408374869,    2.2566492914136074,    2.2494913541516617,    2.2423745034128117,    2.2352976852977582,    2.2282598831765403,    2.2212601158096934,
    2.2142974355881808,    2.2073709268830388,    2.2004797044964759,    2.1936229122068998,    2.1867997214009756,    2.18000932978644,    2.1732509601798871,    2.1665238593642577,
    2.1598272970111703,    2.15316056466364,    2.1465229747750865,    2.1399138598008527,    2.1333325713387525,    2.1267784793154387,    2.120250971215623,    2.1137494513513992,
    2.1072733401691455,    2.1008220735916354,    2.0943951023931957,    2.0879918916058742,    2.0816119199547503,    2.0752546793206323,    2.068919674228523,    2.062606421360341,
    2.0563144490904879,    2.0500432970429436,    2.0437925156686743,    2.0375616658421931,    2.0313503184762189,    2.0251580541534229,    2.0189844627743279,    2.0128291432204874,
    2.0066917030321192,    2.0005717580994244,    1.9944689323668681,    1.9883828575497442,    1.9823131728623846,    1.9762595247574146,    1.9702215666754912,    1.9641989588049911,
    1.9581913678511498,    1.9521984668141819,    1.9462199347759361,    1.9402554566946666,    1.9343047232075261,    1.9283674304404068,    1.9224432798247746,    1.9165319779211638,
    1.9106332362490186,    1.9047467711225783,    1.8988723034925266,    1.8930095587931353,    1.887158266794648,    1.8813181614606644,    1.8754889808102941,    1.8696704667848636,
    1.8638623651189707,    1.8580644252156904,    1.8522764000257417,    1.8464980459304461,    1.8407291226283,    1.8349693930250059,    1.8292186231268062,    1.8234765819369754,
    1.8177430413553295,    1.8120177760806222,    1.8063005635156963,    1.8005911836752744,    1.7948894190962674,    1.7891950547504962,    1.7835078779597129,    1.7778276783128255,
    1.7721542475852274,    1.7664873796601361,    1.7608268704518535,    1.7551725178308617,    1.7495241215506701,    1.743881483176337,    1.7382444060145859,    1.7326126950454461,
    1.7269861568553448,    1.7213645995715827,    1.7157478327981281,    1.7101356675526662,    1.7045279162048381,    1.6989243924156177,    1.6933249110777604,    1.687729288257275,
    1.6821373411358607,    1.6765488879542563,    1.6709637479564563,    1.665381741334736,    1.6598026891754438,    1.6542264134055116,    1.6486527367396371,    1.6430814826280931,
    1.6375124752051218,    1.6319455392378686,    1.626380500075814,    1.6208171836006666,    1.6152554161766679,    1.6096950246012782,    1.6041358360561988,    1.5985776780586918,
    1.5930203784131638,    1.5874637651629682,    1.5819076665423955,    1.5763519109288098,    1.5707963267948966,    1.5652407426609836,    1.5596849870473979,    1.5541288884268252,
    1.5485722751766295,    1.5430149755311016,    1.5374568175335945,    1.5318976289885149,    1.5263372374131252,    1.5207754699891265,    1.5152121535139791,    1.5096471143519248,
    1.5040801783846713,    1.4985111709617001,    1.4929399168501563,    1.4873662401842818,    1.4817899644143495,    1.4762109122550571,    1.4706289056333368,    1.4650437656355368,
    1.4594553124539327,    1.4538633653325181,    1.4482677425120329,    1.4426682611741757,    1.4370647373849552,    1.4314569860371271,    1.425844820791665,    1.4202280540182106,
    1.4146064967344485,    1.408979958544347,    1.4033482475752073,    1.3977111704134562,    1.3920685320391231,    1.3864201357589316,    1.3807657831379396,    1.3751052739296572,
    1.3694384060045659,    1.3637649752769678,    1.3580847756300805,    1.3523975988392971,    1.3467032344935257,    1.3410014699145187,    1.3352920900740968,    1.3295748775091709,
    1.3238496122344636,    1.318116071652818,    1.312374030462987,    1.3066232605647872,    1.3008635309614931,    1.2950946076593473,    1.2893162535640519,    1.2835282283741027,
    1.2777302884708224,    1.2719221868049295,    1.266103672779499,    1.2602744921291289,    1.2544343867951453,    1.2485830947966581,    1.2427203500972666,    1.2368458824672151,
    1.2309594173407747,    1.2250606756686295,    1.2191493737650185,    1.2132252231493863,    1.207287930382267,    1.2013371968951267,    1.1953727188138572,    1.1893941867756115,
    1.1834012857386436,    1.1773936947848023,    1.1713710869143019,    1.1653331288323785,    1.1592794807274087,    1.1532097960400489,    1.1471237212229251,    1.1410208954903689,
    1.1349009505576741,    1.1287635103693059,    1.1226081908154653,    1.1164345994363702,    1.1102423351135742,    1.1040309877476004,    1.0978001379211191,    1.0915493565468495,
    1.0852782044993057,    1.0789862322294521,    1.0726729793612702,    1.0663379742691608,    1.0599807336350429,    1.0536007619839189,    1.0471975511965979,    1.0407705799981577,
    1.0343193134206476,    1.0278432022383936,    1.0213416823741703,    1.0148141742743544,    1.0082600822510408,    1.0016787937889406,    0.99506967881470665,    0.98843208892615309,
    0.98176535657862274,    0.97506879422553527,    0.96834169340990606,    0.96158332380335343,    0.95479293218881767,    0.9479697413828938,    0.94111294909331733,    0.93422172670675441,
    0.92729521800161208,    0.9203325377800996,    0.91333277041325278,    0.90629496829203482,    0.89921815017698126,    0.89210129943813166,    0.88494336217618585,    0.87774324521492408,
    0.87049981395393072,    0.86321189006954113,    0.85587824905067866,    0.84849761755484254,    0.84106867056793011,    0.83359002834979523,    0.82606025314544551,    0.81847784563951054,
    0.8108412411290512,    0.80314880538686562,    0.79539883018414359,    0.78758952843754093,    0.77971902894144296,    0.77178537064124719,    0.76378649639783147,    0.7557202461868564,
    0.74758434966902076,    0.73937641805869003,    0.73109393520820509,    0.72273424781341566,    0.71429455463224689,    0.70577189459200873,    0.69716313364223237,    0.68846495018749454,
    0.67967381890824408,    0.67078599274620887,    0.66179748279343487,    0.6527040357790016,    0.64350110879328426,    0.63418384082404078,    0.62474702059886389,    0.61518505013104074,
    0.60549190324600888,    0.59566107821738679,    0.58568554345715107,    0.57555767497354715,    0.56526918401899839,    0.55481103298007128,    0.54417333708736537,    0.53334524891065438,
    0.5223148218060486,    0.51106884743071856,    0.4995926610421545,    0.48786990641697564,    0.47588224966041665,    0.4636090276374632,    0.45102681179626264,    0.43810886109149277,
    0.42482442747888843,    0.4111378623223475,    0.39700744919913439,    0.38238385320587509,    0.36720802055783708,    0.35140826979522916,    0.33489615843937875,    0.31756042929152151,
    0.29925781871903512,    0.27979847592703461,    0.25892154200622164,    0.23625130598477004,    0.21121088035917793,    0.18282871674409445,    0.14920957360514839,    0.10545811702189975
};

#endif // _TRIG_TABLES_H

/* End include: trig_tables.h */

#if defined(__GNUC__) || defined(__GNUG__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#pragma GCC diagnostic ignored "-Wbad-function-cast"
#endif

#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wfloat-equal"
#pragma clang diagnostic ignored "-Wbad-function-cast"
#endif // __clang__

#define clamp(x, a, b) (min(max((x), (a)), (b)))

#define abs(x) ((x) < 0 ? -(x) : (x))

#define PI 3.141592653589793
#define TAU (PI*2)

unit_local inline f32 lerp32(f32 a, f32 b, f32 t) {
    return a + (b-a)*t;
}
unit_local inline f64 lerp64(f64 a, f64 b, f64 t) {
    return a + (b-a)*t;
}

unit_local inline f32 floor32(f32 f) {
    return (f32)((f) < 0 ? (s64)(f) - 1 : (s64)(f));
}
unit_local inline f32 ceil32(f32 f) {
    return (f32)((f) == (f32)(s64)(f) ? (s64)(f) : (f) > 0 ? (s64)(f) + 1 : (s64)(f));
}
unit_local inline f64 floor64(f64 f) {
    return (f64)((f) < 0 ? (s64)(f) - 1 : (s64)(f));
}
unit_local inline f64 ceil64(f64 f) {
    return (f64)((f) == (f64)(s64)(f) ? (s64)(f) : (f) > 0 ? (s64)(f) + 1 : (s64)(f));
}

#define trig_lookup(t, f) do { \
    s64 c = sizeof(t) / sizeof(f64); \
    f64 norm_index = (f) * (f64)c; \
    s64 ilo = (s64)floor64(norm_index); \
    s64 ihi = (s64)ceil64(norm_index); \
    if (ihi >= c) return t[0]; \
    f64 t_frac = norm_index - (f64)ilo;\
    return lerp64(t[ilo], t[ihi], t_frac); \
} while (0)


unit_local inline float64 fmod_cycling(float64 x, float64 y) {
    if (y == 0.0) {
        return 0.0;
    }
    float64 n = (int)(x / y);
    return x - n * y;
}

unit_local inline float64 sin(float64 x) {
    if (x == 0.0) return 0.0;
    x = fmod_cycling(x, TAU);
    trig_lookup(sine_table, x/TAU);
}
unit_local inline float64 asin(float64 x) {
    if (x == 0.0) return 0.0;
    x = clamp(x, -1.0, 1.0);
    trig_lookup(asine_table, ((x+1.0)/2.0)/TAU);
}
unit_local inline float64 cos(float64 x) {
    if (x == 0.0) return 1.0;
    x = fmod_cycling(x, TAU);
    trig_lookup(cosine_table, x/TAU);
}
unit_local inline float64 acos(float64 x) {
    if (x == 1.0) return 0.0;
    x = clamp(x, -1.0, 1.0);
    trig_lookup(acosine_table, ((x+1.0)/2.0)/TAU);
}
unit_local inline float64 tan(float64 x) {
    x = fmod_cycling(x, TAU);
    s64 i = (s64)((x/TAU) * (f64)(sizeof(tan_table)/sizeof(float64)));
    if (i >= (s64)(sizeof(tan_table)/sizeof(float64))) return tan_table[0];
    return tan_table[i];
}
unit_local inline float64 atan(float64 x) {
    if (x == 0.0) return 0.0;
    float64 theta = (x < 1.0 && x > -1.0) ? x : (x > 0.0 ? PI / 2 : -PI / 2);
    
    for (int i = 0; i < 5; ++i) { 
        float64 sin_theta = sin(theta);
        float64 cos_theta = cos(theta);
        float64 tan_theta = sin_theta / cos_theta;
        
        theta -= (tan_theta - x) / (1.0 + tan_theta * tan_theta);
    }
    
    return theta;
}

unit_local inline float64 atan2(float64 y, float64 x) {
    return (x > 0) ? atan(y / x) :
           (x < 0 && y >= 0) ? atan(y / x) + PI :
           (x < 0 && y < 0) ? atan(y / x) - PI :
           (y > 0) ? PI / 2 :
           (y < 0) ? -PI / 2 : 0.0;
}

unit_local inline f32 ln32(f32 x) {
    u32 bx = * (u32 *) (&x);
    u32 ex = bx >> 23;
    s32 t = (s32)ex-(s32)127;
    bx = 1065353216 | (bx & 8388607);
    x = * (f32 *) (&bx);
    return -1.49278f+(2.11263f+(-0.729104f+0.10969f*x)*x)*x+0.6931471806f*(f32)t;
}
unit_local inline float64 ln64(float64 x) {
    u64 bx = *(u64 *)(&x);
    u64 ex = bx >> 52;
    s32 t = (s32)ex - 1023;
    bx = 4607182418800017408ULL | (bx & 4503599627370495ULL);
    x = *(float64 *)(&bx);
    return -1.49278 + (2.11263 + (-0.729104 + 0.10969 * x) * x) * x + 0.6931471806 * t;
}

unit_local inline u64 powu(u64 x, u64 e) {
    if (e == 0) return 1;
    u64 result = x;
    for (u64 i = 0; i < e-1; i += 1) {
        result *= x;
    }
    return result;
}
unit_local inline f64 powf64(f64 x, f64 e) {
    if (e == 0) return 1;
    f64 result = x;
    for (f64 i = 0; i < e-1; i += 1) {
        result *= x;
    }
    return result;
}

unit_local inline f32 sqrt32(f32 n) {
    if (n < 0.0f) {
        return -1.0f;
    }
    if (n == 0.0f) {
        return 0.0f;
    }

    f32 x = n;
    f32 tolerance = 0.000001f;
    f32 delta;

    do {
        f32 next_x = 0.5f * (x + n / x);
        delta = next_x - x;
        if (delta < 0.0f) {
            delta = -delta;
        }
        x = next_x;
    } while (delta > tolerance);

    return x;
}

unit_local inline float64 sqrt64(float64 n) {
    if (n < 0.0) {
        return -1.0;
    }
    if (n == 0.0) {
        return 0.0;
    }

    float64 x = n;
    float64 tolerance = 0.000001;
    float64 delta;

    do {
        float64 next_x = 0.5 * (x + n / x);
        delta = next_x - x;
        if (delta < 0.0) {
            delta = -delta;
        }
        x = next_x;
    } while (delta > tolerance);

    return x;
}



#define v2_expand(v) (v).x, (v).y
#define v3_expand(v) (v).x, (v).y, (v).z
#define v4_expand(v) (v).x, (v).y, (v).z, (v).w

#define v2(x, y)       (f32v2) {x, y}
#define v3(x, y, z)    (f32v3) {x, y, z}
#define v4(x, y, z, w) (f32v4) {x, y, z, w}

#define v2_scalar f32v2_scalar
#define v3_scalar f32v3_scalar
#define v4_scalar f32v4_scalar

#define v2_one  f32v2_one
#define v3_one  f32v3_one
#define v4_one  f32v4_one

#define v2_zero  f32v2_zero
#define v3_zero  f32v3_zero
#define v4_zero  f32v4_zero

#define v2_add  f32v2_add
#define v3_add  f32v3_add
#define v4_add  f32v4_add

#define v2_sub  f32v2_sub
#define v3_sub  f32v3_sub
#define v4_sub  f32v4_sub

#define v2_mul  f32v2_mul
#define v3_mul  f32v3_mul
#define v4_mul  f32v4_mul

#define v2_mulf  f32v2_mulf32
#define v3_mulf  f32v3_mulf32
#define v4_mulf  f32v4_mulf32

#define v2_div  f32v2_div
#define v3_div  f32v3_div
#define v4_div  f32v4_div

#define v2_divf  f32v2_divf32
#define v3_divf  f32v3_divf32
#define v4_divf  f32v4_divf32

#define v2_len  f32v2_len
#define v3_len  f32v3_len
#define v4_len  f32v4_len

#define v2_lensq  f32v2_lensq
#define v3_lensq  f32v3_lensq
#define v4_lensq  f32v4_lensq

#define v2_average  f32v2_average
#define v3_average  f32v3_average
#define v4_average  f32v4_average

#define v2_normalize  f32v2_normalize
#define v3_normalize  f32v3_normalize
#define v4_normalize  f32v4_normalize

#define v2_dot  f32v2_dot
#define v3_dot  f32v3_dot
#define v4_dot  f32v4_dot

#define v2_perp  f32v2_perp
#define v3_cross  f32v3_cross

typedef struct f32v2 {
    f32 x, y;
} f32v2;
typedef struct f32v3 {
    f32 x, y, z;
} f32v3;
typedef struct f32v4 {
    f32 x, y, z, w;
} f32v4;

unit_local inline f32v2 f32v2_scalar(f32 a) { return (f32v2){a, a}; }
unit_local inline f32v3 f32v3_scalar(f32 a) { return (f32v3){a, a, a}; }
unit_local inline f32v4 f32v4_scalar(f32 a) { return (f32v4){a, a, a, a}; }

unit_local const f32v2 f32v2_one = {1, 1};
unit_local const f32v3 f32v3_one = {1, 1, 1};
unit_local const f32v4 f32v4_one = {1, 1, 1, 1};

unit_local const f32v2 f32v2_zero = {0, 0};
unit_local const f32v3 f32v3_zero = {0, 0, 0};
unit_local const f32v4 f32v4_zero = {0, 0, 0, 0};

unit_local inline f32v2 f32v2_add(f32v2 a, f32v2 b)  { return (f32v2){a.x+b.x, a.y+b.y}; }
unit_local inline f32v3 f32v3_add(f32v3 a, f32v3 b)  { return (f32v3){a.x+b.x, a.y+b.y, a.z+b.z}; }
unit_local inline f32v4 f32v4_add(f32v4 a, f32v4 b)  { return (f32v4){a.x+b.x, a.y+b.y, a.z+b.z, a.w+b.w}; }

unit_local inline f32v2 f32v2_sub(f32v2 a, f32v2 b)  { return (f32v2){a.x-b.x, a.y-b.y}; }
unit_local inline f32v3 f32v3_sub(f32v3 a, f32v3 b)  { return (f32v3){a.x-b.x, a.y-b.y, a.z-b.z}; }
unit_local inline f32v4 f32v4_sub(f32v4 a, f32v4 b)  { return (f32v4){a.x-b.x, a.y-b.y, a.z-b.z, a.w-b.w}; }

unit_local inline f32v2 f32v2_mul(f32v2 a, f32v2 b)  { return (f32v2){a.x*b.x, a.y*b.y}; }
unit_local inline f32v3 f32v3_mul(f32v3 a, f32v3 b)  { return (f32v3){a.x*b.x, a.y*b.y, a.z*b.z}; }
unit_local inline f32v4 f32v4_mul(f32v4 a, f32v4 b)  { return (f32v4){a.x*b.x, a.y*b.y, a.z*b.z, a.w*b.w}; }

unit_local inline f32v2 f32v2_mulf32(f32v2 a, f32 s) { return f32v2_mul(a, (f32v2){s, s}); }
unit_local inline f32v3 f32v3_mulf32(f32v3 a, f32 s) { return f32v3_mul(a, (f32v3){s, s, s}); }
unit_local inline f32v4 f32v4_mulf32(f32v4 a, f32 s) { return f32v4_mul(a, (f32v4){s, s, s, s}); }

unit_local inline f32v2 f32v2_div(f32v2 a, f32v2 b)  { return (f32v2){a.x/b.x, a.y/b.y}; }
unit_local inline f32v3 f32v3_div(f32v3 a, f32v3 b)  { return (f32v3){a.x/b.x, a.y/b.y, a.z/b.z}; }
unit_local inline f32v4 f32v4_div(f32v4 a, f32v4 b)  { return (f32v4){a.x/b.x, a.y/b.y, a.z/b.z, a.w/b.w}; }

unit_local inline f32v2 f32v2_divf32(f32v2 a, f32 s) { return f32v2_div(a, (f32v2){s, s}); }
unit_local inline f32v3 f32v3_divf32(f32v3 a, f32 s) { return f32v3_div(a, (f32v3){s, s, s}); }
unit_local inline f32v4 f32v4_divf32(f32v4 a, f32 s) { return f32v4_div(a, (f32v4){s, s, s, s}); }

unit_local inline f32 f32v2_lensq(f32v2 a) { return a.x*a.x + a.y*a.y; }
unit_local inline f32 f32v3_lensq(f32v3 a) { return a.x * a.x + a.y * a.y + a.z * a.z; }
unit_local inline f32 f32v4_lensq(f32v4 a) { return a.x * a.x + a.y * a.y + a.z * a.z + a.w * a.w; }

unit_local inline f32 f32v2_len(f32v2 a) { return sqrt32(a.x*a.x + a.y*a.y); }
unit_local inline f32 f32v3_len(f32v3 a) { return sqrt32(a.x * a.x + a.y * a.y + a.z * a.z); }
unit_local inline f32 f32v4_len(f32v4 a) { return sqrt32(a.x * a.x + a.y * a.y + a.z * a.z + a.w * a.w); }

unit_local inline f32 f32v2_average(f32v2 a) { return (a.x+a.y)/2.0f; }
unit_local inline f32 f32v3_average(f32v3 a) { return (a.x + a.y + a.z) / 3.0f; }
unit_local inline f32 f32v4_average(f32v4 a) { return (a.x + a.y + a.z + a.w) / 4.0f; }


typedef struct s32v2 {
    s32 x, y;
} s32v2;
typedef struct s32v3 {
    s32 x, y, z;
} s32v3;
typedef struct s32v4 {
    s32 x, y, z, w;
} s32v4;

typedef struct u32v2 {
    u32 x, y;
} u32v2;
typedef struct u32v3 {
    u32 x, y, z;
} u32v3;
typedef struct u32v4 {
    u32 x, y, z, w;
} u32v4;


#if defined(__GNUC__) || defined(__GNUG__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif

#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wfloat-equal"
#endif // __clang__

unit_local inline f32v2 f32v2_normalize(f32v2 a) { return f32v2_lensq(a) == 0 ? f32v2_scalar(0) : f32v2_divf32(a, f32v2_len(a)); }
unit_local inline f32v3 f32v3_normalize(f32v3 a) { return f32v3_lensq(a) == 0 ? f32v3_scalar(0) : f32v3_divf32(a, f32v3_len(a)); }
unit_local inline f32v4 f32v4_normalize(f32v4 a) { return f32v4_lensq(a) == 0 ? f32v4_scalar(0) : f32v4_divf32(a, f32v4_len(a)); }

#if defined(__GNUC__) || defined(__GNUG__)
#pragma GCC diagnostic pop
#endif

#ifdef __clang__
#pragma clang diagnostic pop
#endif // __clang__

unit_local inline f32 f32v2_dot(f32v2 a, f32v2 b) { return a.x * b.x + a.y * b.y; }
unit_local inline f32 f32v3_dot(f32v3 a, f32v3 b) { return a.x * b.x + a.y * b.y + a.z * b.z; }
unit_local inline f32 f32v4_dot(f32v4 a, f32v4 b) { return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w; }

unit_local inline f32 f32v2_perp(f32v2 a, f32v2 b) { return (a.x * b.y) - (a.y * b.x); }
unit_local inline f32v3 f32v3_cross(f32v3 a, f32v3 b) { return (f32v3){(a.y*b.z)-(a.z*b.y), (a.z*b.x)-(a.x*b.z), (a.x*b.y)-(a.y*b.x)}; }


// Column major
typedef union f32m4x4 {
    f32 data[4][4];
    f32v4 cols[4];
} f32m4x4;
typedef f32m4x4 f32m4;

unit_local inline f32m4x4 m4_scalar(f32 scalar) {
    f32m4x4 m = (f32m4x4){0};
    m.data[0][0] = scalar; 
    m.data[1][1] = scalar; 
    m.data[2][2] = scalar; 
    m.data[3][3] = scalar; 
    return m;
}

unit_local inline f32m4x4 m4_identity(void) { return m4_scalar(1.0); }

unit_local inline f32m4x4 m4_make_translation(f32v3 translation) {
    f32m4x4 m = m4_identity();    
    *(f32v3*)m.data[3] = translation;
    
    return m;
}

unit_local inline f32m4x4 m4_translate(f32m4x4 m, f32v3 translation) {
    m.data[3][0] = translation.x;
    m.data[3][1] = translation.y;
    m.data[3][2] = translation.z;
    return m;
}

unit_local inline f32m4x4 m4_add(f32m4x4 m0, f32m4x4 m1) {
    *(f32v4*)m0.data[0] = v4_add(*(f32v4*)m0.data[0], *(f32v4*)m1.data[0]);
    *(f32v4*)m0.data[1] = v4_add(*(f32v4*)m0.data[1], *(f32v4*)m1.data[1]);
    *(f32v4*)m0.data[2] = v4_add(*(f32v4*)m0.data[2], *(f32v4*)m1.data[2]);
    *(f32v4*)m0.data[3] = v4_add(*(f32v4*)m0.data[3], *(f32v4*)m1.data[3]);
    
    return m0;
}

unit_local inline f32m4x4 m4_make_scale(f32v3 scalars) {
    f32m4x4 m = m4_identity();
    *(f32v4*)m.data[0] = v4_mulf(*(f32v4*)m.data[0], scalars.x);
    *(f32v4*)m.data[1] = v4_mulf(*(f32v4*)m.data[1], scalars.y);
    *(f32v4*)m.data[2] = v4_mulf(*(f32v4*)m.data[2], scalars.z);
    
    return m;
}

unit_local inline f32m4x4 m4_scalef(f32m4x4 m, f32 scalar) {
    *(f32v4*)m.data[0] = v4_mulf(*(f32v4*)m.data[0], scalar);
    *(f32v4*)m.data[1] = v4_mulf(*(f32v4*)m.data[1], scalar);
    *(f32v4*)m.data[2] = v4_mulf(*(f32v4*)m.data[2], scalar);
    *(f32v4*)m.data[3] = v4_mulf(*(f32v4*)m.data[3], scalar);
    
    return m;
}
unit_local inline f32m4x4 m4_scale(f32m4x4 m, f32v3 scalars) {
    *(f32v4*)m.data[0] = v4_mulf(*(f32v4*)m.data[0], scalars.x);
    *(f32v4*)m.data[1] = v4_mulf(*(f32v4*)m.data[1], scalars.y);
    *(f32v4*)m.data[2] = v4_mulf(*(f32v4*)m.data[2], scalars.z);
    
    return m;
}
unit_local inline f32m4x4 m4_scale_v4(f32m4x4 m, f32v4 scalars) {
    *(f32v4*)m.data[0] = v4_mulf(*(f32v4*)m.data[0], scalars.x);
    *(f32v4*)m.data[1] = v4_mulf(*(f32v4*)m.data[1], scalars.y);
    *(f32v4*)m.data[2] = v4_mulf(*(f32v4*)m.data[2], scalars.z);
    *(f32v4*)m.data[3] = v4_mulf(*(f32v4*)m.data[3], scalars.w);
    
    return m;
}

unit_local inline f32m4x4 m4_make_rotation_x(float rad) {
    float c = (f32)cos((f64)rad);
    float s = (f32)sin((f64)rad);
    return (f32m4x4){{
        {  c,  0, -s,  0 },
        {  0,  1,  0,  0 },
        {  0,  0,  c,  0 },
        {  s,  0,  0,  1 },
    }};
}
unit_local inline f32m4x4 m4_make_rotation_y(float rad) {
    float c = (f32)cos((f64)rad);
    float s = (f32)sin((f64)rad);
    return (f32m4x4){{
        {  1,  0,  0,  0 },
        {  0,  c,  s,  0 },
        {  0, -s,  c,  0 },
        {  0,  0,  0,  1 },
    }};
}
unit_local inline f32m4x4 m4_make_rotation_z(float rad) {
    float c = (f32)cos((f64)rad);
    float s = (f32)sin((f64)rad);
    return (f32m4x4){{
        {  c,  s,  0,  0 },
        { -s,  c,  0,  0 },
        {  0,  0,  1,  0 },
        {  0,  0,  0,  1 },
    }};
}

unit_local inline f32m4x4 m4_make_perspective_left_handed(f32 fov_rad, f32 aspect_ratio, f32 n, f32 f) {
    f32m4x4 proj = (f32m4x4){0};

    f32 s = 1.0f / (f32)tan((f64)fov_rad * 0.5);
    proj.cols[0].x = 1/(aspect_ratio*s);
    proj.cols[1].y = 1/s;
    proj.cols[2].z = f/(f - n);
    proj.cols[2].w = 1.0f;
    proj.cols[3].z = -n*f/(f - n);

    return proj;
}

unit_local inline f32m4x4 m4_transpose(f32m4x4 m) {
    f32m4x4 tm = m;
    
    // Diagonal is copied over, but swap each side of it
    
    tm.data[0][1] = m.data[1][0];
    tm.data[0][2] = m.data[2][0];
    tm.data[0][3] = m.data[3][0];
    
    tm.data[1][0] = m.data[0][1];
    tm.data[1][2] = m.data[2][1];
    tm.data[1][3] = m.data[3][1];
    
    tm.data[2][0] = m.data[0][2];
    tm.data[2][1] = m.data[1][2];
    tm.data[2][3] = m.data[3][2];
    
    tm.data[3][0] = m.data[0][3];
    tm.data[3][1] = m.data[1][3];
    tm.data[3][2] = m.data[2][3];
    
    return tm;
} 

unit_local inline f32m4x4 m4_mulm4(f32m4x4 m0, f32m4x4 m1) {
/*
        m = m0 * m1
        
        each ij in m should be dot(m0[row:i], m1[col:j])
        
        We transpose m0 so we can read rows trivially (since our matrices are column-major)
*/

    // todo(charlie) very easily vectorized


    f32m4x4 tm0 = m4_transpose(m0);
    f32m4x4 m;
    
    *(float*)&m.data[0][0] = v4_dot(*(f32v4*)tm0.data[0], *(f32v4*)m1.data[0]);
    *(float*)&m.data[0][1] = v4_dot(*(f32v4*)tm0.data[1], *(f32v4*)m1.data[0]);
    *(float*)&m.data[0][2] = v4_dot(*(f32v4*)tm0.data[2], *(f32v4*)m1.data[0]);
    *(float*)&m.data[0][3] = v4_dot(*(f32v4*)tm0.data[3], *(f32v4*)m1.data[0]);
    
    *(float*)&m.data[1][0] = v4_dot(*(f32v4*)tm0.data[0], *(f32v4*)m1.data[1]);
    *(float*)&m.data[1][1] = v4_dot(*(f32v4*)tm0.data[1], *(f32v4*)m1.data[1]);
    *(float*)&m.data[1][2] = v4_dot(*(f32v4*)tm0.data[2], *(f32v4*)m1.data[1]);
    *(float*)&m.data[1][3] = v4_dot(*(f32v4*)tm0.data[3], *(f32v4*)m1.data[1]);
    
    *(float*)&m.data[2][0] = v4_dot(*(f32v4*)tm0.data[0], *(f32v4*)m1.data[2]);
    *(float*)&m.data[2][1] = v4_dot(*(f32v4*)tm0.data[1], *(f32v4*)m1.data[2]);
    *(float*)&m.data[2][2] = v4_dot(*(f32v4*)tm0.data[2], *(f32v4*)m1.data[2]);
    *(float*)&m.data[2][3] = v4_dot(*(f32v4*)tm0.data[3], *(f32v4*)m1.data[2]);
    
    *(float*)&m.data[3][0] = v4_dot(*(f32v4*)tm0.data[0], *(f32v4*)m1.data[3]);
    *(float*)&m.data[3][1] = v4_dot(*(f32v4*)tm0.data[1], *(f32v4*)m1.data[3]);
    *(float*)&m.data[3][2] = v4_dot(*(f32v4*)tm0.data[2], *(f32v4*)m1.data[3]);
    *(float*)&m.data[3][3] = v4_dot(*(f32v4*)tm0.data[3], *(f32v4*)m1.data[3]);
    
    return m;
}

unit_local inline f32v4 m4_mulv4(f32m4x4 m0, f32v4 m1) {
    f32m4x4 tm0 = m4_transpose(m0);
    
    f32v4 f;
    f.x = v4_dot(*(f32v4*)tm0.data[0], m1);
    f.y = v4_dot(*(f32v4*)tm0.data[1], m1);
    f.z = v4_dot(*(f32v4*)tm0.data[2], m1);
    f.w = v4_dot(*(f32v4*)tm0.data[3], m1);
    
    return f;
}

unit_local inline f32v3 m4_mulv3_trunc(f32m4x4 m0, f32v3 m1) {
    f32m4x4 tm0 = m4_transpose(m0);
    
    f32v3 f;
    f.x = v4_dot(*(f32v4*)tm0.data[0], v4(m1.x, m1.y, m1.z, 1.0f));
    f.y = v4_dot(*(f32v4*)tm0.data[1], v4(m1.x, m1.y, m1.z, 1.0f));
    f.z = v4_dot(*(f32v4*)tm0.data[2], v4(m1.x, m1.y, m1.z, 1.0f));
    
    return f;
} 
unit_local inline f32v2 m4_mulv2_trunc(f32m4x4 m0, f32v2 m1) {
    f32m4x4 tm0 = m4_transpose(m0);
    
    f32v2 f;
    f.x = v4_dot(*(f32v4*)tm0.data[0], v4(m1.x, m1.y, 0.0f, 1.0f));
    f.y = v4_dot(*(f32v4*)tm0.data[1], v4(m1.x, m1.y, 0.0f, 1.0f));
    
    return f;
} 

unit_local inline f64 get_power_of_two_f64(f64 x, u64 exp) {
    return x * (f64)(1ULL << exp);
}

// Column major
typedef union f32m3x3 {
    f32 data[3][3];
    f32v3 cols[3];
} f32m3x3;
typedef f32m3x3 f32m3;

unit_local inline f32m3x3 m3_scalar(f32 scalar) {
    f32m3x3 m = (f32m3x3){0};
    m.data[0][0] = scalar;
    m.data[1][1] = scalar;
    m.data[2][2] = scalar;
    return m;
}

unit_local inline f32m3x3 m3_identity(void) { return m3_scalar(1.0f); }

unit_local inline f32m3x3 m3_make_translation(f32v2 translation) {
    f32m3x3 m = m3_identity();
    m.data[2][0] = translation.x;
    m.data[2][1] = translation.y;
    return m;
}

unit_local inline f32m3x3 m3_translate(f32m3x3 m, f32v2 translation) {
    m.data[2][0] = translation.x;
    m.data[2][1] = translation.y;
    return m;
}

unit_local inline f32m3x3 m3_add(f32m3x3 m0, f32m3x3 m1) {
    *(f32v3*)m0.data[0] = v3_add(*(f32v3*)m0.data[0], *(f32v3*)m1.data[0]);
    *(f32v3*)m0.data[1] = v3_add(*(f32v3*)m0.data[1], *(f32v3*)m1.data[1]);
    *(f32v3*)m0.data[2] = v3_add(*(f32v3*)m0.data[2], *(f32v3*)m1.data[2]);
    return m0;
}

unit_local inline f32m3x3 m3_make_scale(f32v2 scalars) {
    f32m3x3 m = m3_identity();
    *(f32v3*)m.data[0] = v3_mulf(*(f32v3*)m.data[0], scalars.x);
    *(f32v3*)m.data[1] = v3_mulf(*(f32v3*)m.data[1], scalars.y);
    return m;
}

unit_local inline f32m3x3 m3_scalef(f32m3x3 m, f32 scalar) {
    *(f32v3*)m.data[0] = v3_mulf(*(f32v3*)m.data[0], scalar);
    *(f32v3*)m.data[1] = v3_mulf(*(f32v3*)m.data[1], scalar);
    *(f32v3*)m.data[2] = v3_mulf(*(f32v3*)m.data[2], scalar);
    return m;
}

unit_local inline f32m3x3 m3_scale(f32m3x3 m, f32v2 scalars) {
    *(f32v3*)m.data[0] = v3_mulf(*(f32v3*)m.data[0], scalars.x);
    *(f32v3*)m.data[1] = v3_mulf(*(f32v3*)m.data[1], scalars.y);
    return m;
}

unit_local inline f32m3x3 m3_make_rotation(f32v3 axis, f32 rad) {
    f32v3 u = v3_normalize(axis);
    float c  = (f32)cos((f64)rad);
    float s  = (f32)sin((f64)rad);
    float oc = 1.0f - c;
    
    return (f32m3x3){{
        { c + u.x * u.x * oc,        u.x * u.y * oc + u.z * s,  u.x * u.z * oc - u.y * s },
        { u.x * u.y * oc - u.z * s,  c + u.y * u.y * oc,        u.y * u.z * oc + u.x * s },
        { u.x * u.z * oc + u.y * s,  u.y * u.z * oc - u.x * s,  c + u.z * u.z * oc }
    }};
}

unit_local inline f32m3x3 m3_make_rotation_z(float rad) {
    float c = (f32)cos((f64)rad);
    float s = (f32)sin((f64)rad);
    return (f32m3x3){{
        {  c,  s,  0 },
        { -s,  c,  0 },
        {  0,  0,  1 },
    }};
}

unit_local inline f32m3x3 m3_transpose(f32m3x3 m) {
    f32m3x3 tm = m;
    
    tm.data[0][1] = m.data[1][0];
    tm.data[0][2] = m.data[2][0];
    
    tm.data[1][0] = m.data[0][1];
    tm.data[1][2] = m.data[2][1];
    
    tm.data[2][0] = m.data[0][2];
    tm.data[2][1] = m.data[1][2];
    
    return tm;
}

unit_local inline f32m3x3 m3_mulm3(f32m3x3 m0, f32m3x3 m1) {
    f32m3x3 tm0 = m3_transpose(m0);
    f32m3x3 m;
    
    m.data[0][0] = v3_dot(*(f32v3*)tm0.data[0], *(f32v3*)m1.data[0]);
    m.data[0][1] = v3_dot(*(f32v3*)tm0.data[1], *(f32v3*)m1.data[0]);
    m.data[0][2] = v3_dot(*(f32v3*)tm0.data[2], *(f32v3*)m1.data[0]);
    
    m.data[1][0] = v3_dot(*(f32v3*)tm0.data[0], *(f32v3*)m1.data[1]);
    m.data[1][1] = v3_dot(*(f32v3*)tm0.data[1], *(f32v3*)m1.data[1]);
    m.data[1][2] = v3_dot(*(f32v3*)tm0.data[2], *(f32v3*)m1.data[1]);
    
    m.data[2][0] = v3_dot(*(f32v3*)tm0.data[0], *(f32v3*)m1.data[2]);
    m.data[2][1] = v3_dot(*(f32v3*)tm0.data[1], *(f32v3*)m1.data[2]);
    m.data[2][2] = v3_dot(*(f32v3*)tm0.data[2], *(f32v3*)m1.data[2]);
    
    return m;
}

unit_local inline f32v3 m3_mulv3(f32m3x3 m, f32v3 v) {
    f32m3x3 tm = m3_transpose(m);
    
    f32v3 f;
    f.x = v3_dot(*(f32v3*)tm.data[0], v);
    f.y = v3_dot(*(f32v3*)tm.data[1], v);
    f.z = v3_dot(*(f32v3*)tm.data[2], v);
    
    return f;
}

unit_local inline f32v2 m3_mulv2_trunc(f32m3x3 m, f32v2 v) {
    f32m3x3 tm = m3_transpose(m);
    
    f32v2 f;
    f.x = v3_dot(*(f32v3*)tm.data[0], v3(v.x, v.y, 1.0f));
    f.y = v3_dot(*(f32v3*)tm.data[1], v3(v.x, v.y, 1.0f));
    
    return f;
}


#if defined(__GNUC__) || defined(__GNUG__)
#pragma GCC diagnostic pop
#endif

#ifdef __clang__
#pragma clang diagnostic pop
#endif // __clang__

#endif //_MATH_H
#endif // _ONE_MATH_H
#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#if defined(__GNUC__) || defined(__GNUG__)
#pragma GCC diagnostic pop
#endif

